[{"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\Movies.tsx":"1","D:\\react-project\\04-exclusive-platform\\src\\index.tsx":"2","D:\\react-project\\04-exclusive-platform\\src\\App.tsx":"3","D:\\react-project\\04-exclusive-platform\\src\\reportWebVitals.ts":"4","D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerMD.ts":"5","D:\\react-project\\04-exclusive-platform\\src\\Redux\\Change_languages.ts":"6","D:\\react-project\\04-exclusive-platform\\src\\Components\\ToDoList\\ToDoList.tsx":"7","D:\\react-project\\04-exclusive-platform\\src\\Redux\\Global_functions.ts":"8","D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\MovieItem.tsx":"9","D:\\react-project\\04-exclusive-platform\\src\\api\\api.ts":"10","D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\SearchMovie.tsx":"11","D:\\react-project\\04-exclusive-platform\\src\\Components\\context.js":"12","D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerGoogleLogin.ts":"13","D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerToDoList.ts":"14","D:\\react-project\\04-exclusive-platform\\src\\Components\\Home.tsx":"15","D:\\react-project\\04-exclusive-platform\\src\\Components\\weather\\Weather.tsx":"16","D:\\react-project\\04-exclusive-platform\\src\\Redux\\types.ts":"17","D:\\react-project\\04-exclusive-platform\\src\\Components\\header\\headerC.ts":"18","D:\\react-project\\04-exclusive-platform\\src\\Components\\MainDashboard\\Dashboard_con.ts":"19","D:\\react-project\\04-exclusive-platform\\src\\Components\\header\\header.tsx":"20","D:\\react-project\\04-exclusive-platform\\src\\Components\\MainDashboard.tsx":"21","D:\\react-project\\04-exclusive-platform\\src\\Redux\\store.ts":"22","D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\SliderMovie.tsx":"23","D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\ViewFilm.tsx":"24","D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\exchangeRates.tsx":"25","D:\\react-project\\04-exclusive-platform\\src\\Redux\\interfaces.ts":"26","D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\TransferTo.tsx":"27","D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\TranserFrom.tsx":"28"},{"size":6435,"mtime":1611001257504,"results":"29","hashOfConfig":"30"},{"size":702,"mtime":1608063853192,"results":"31","hashOfConfig":"30"},{"size":992,"mtime":1611169272963,"results":"32","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"33","hashOfConfig":"30"},{"size":767,"mtime":1611169008336,"results":"34","hashOfConfig":"30"},{"size":703,"mtime":1609756191128,"results":"35","hashOfConfig":"30"},{"size":7085,"mtime":1608669356818,"results":"36","hashOfConfig":"30"},{"size":350,"mtime":1608666049089,"results":"37","hashOfConfig":"30"},{"size":1503,"mtime":1610219196510,"results":"38","hashOfConfig":"30"},{"size":195,"mtime":1610045118776,"results":"39","hashOfConfig":"30"},{"size":2523,"mtime":1610895846663,"results":"40","hashOfConfig":"30"},{"size":77,"mtime":1610046982825,"results":"41","hashOfConfig":"30"},{"size":1053,"mtime":1608556017486,"results":"42","hashOfConfig":"30"},{"size":2428,"mtime":1608920877146,"results":"43","hashOfConfig":"30"},{"size":268,"mtime":1608315727163,"results":"44","hashOfConfig":"30"},{"size":7486,"mtime":1609351017832,"results":"45","hashOfConfig":"30"},{"size":420,"mtime":1608667462796,"results":"46","hashOfConfig":"30"},{"size":838,"mtime":1608494977087,"results":"47","hashOfConfig":"30"},{"size":452,"mtime":1608746642751,"results":"48","hashOfConfig":"30"},{"size":2488,"mtime":1609351304701,"results":"49","hashOfConfig":"30"},{"size":1218,"mtime":1610998276789,"results":"50","hashOfConfig":"30"},{"size":637,"mtime":1609754970618,"results":"51","hashOfConfig":"30"},{"size":2873,"mtime":1610651850170,"results":"52","hashOfConfig":"30"},{"size":2244,"mtime":1611001059254,"results":"53","hashOfConfig":"30"},{"size":4953,"mtime":1611429626809,"results":"54","hashOfConfig":"30"},{"size":3048,"mtime":1611170219984,"results":"55","hashOfConfig":"30"},{"size":2742,"mtime":1611427420110,"results":"56","hashOfConfig":"30"},{"size":2906,"mtime":1611426888077,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"du34is",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\Movies.tsx",["134","135","136","137","138"],"import React from 'react'\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport s from './../../styles/Movies/movies-styles.module.scss';\r\nimport  './../../styles/Movies/movies.scss'\r\nimport logo from './../../images/movie_logo.png';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport SearchMovie from './SearchMovie';\r\nimport { API_MOVIES } from '../../api/api';\r\nimport { IMovies } from '../../Redux/interfaces';\r\nimport { Context } from '../context.js';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport { Link, Prompt, Redirect } from 'react-router-dom';\r\nimport SliderMovie from './SliderMovie';\r\nimport Viewfilm from './ViewFilm';\r\n\r\n\r\n\r\n\r\n\r\nconst Movies = () => {\r\n\r\n\r\nconst [movieList,setMovieList] = useState<IMovies[]>([]);\r\n\r\n// const [language,setLanguage ]  = useState<string>(\"ru\");\r\n\r\nconst [currentPage , setCurrentPage] = useState<number>(1);\r\n\r\nconst [totalPages , setTotalPages] = useState<number>(0);\r\n\r\nconst [loading,setLoading] = useState<boolean>(false);\r\n\r\nconst [viewFilm,setViewFilm] = useState<string>(\"\");\r\n\r\nconst [search,setSearchFilm] = useState<string>(\"\");\r\n\r\nlet Pagination : Array<number>  = [];\r\n\r\n\r\n\r\nconst getTopMovieList = () =>{\r\n  console.log(search);\r\n  axios.get(search === \"\" ? ` https://api.themoviedb.org/3/movie/popular?api_key=${API_MOVIES}&language=ru-RU&page=${currentPage} ` :\r\n  `https://api.themoviedb.org/3/search/movie?api_key=${API_MOVIES}&language=ru-RU&query=${search}&page=${currentPage}&include_adult=false`\r\n   )\r\n  .then((response:any)=>{\r\n      console.log(response);\r\n      const {data} = response;\r\n      \r\n      setMovieList(data.results);\r\n      setTotalPages(data.total_pages);\r\n    setTimeout(() =>   setLoading(true), 1000);\r\n  })\r\n  .catch((error:Error)=> console.log(error.message));\r\n}\r\n\r\n\r\n\r\nconst changePageHandler = (page:number) =>{\r\nif(page === currentPage) return\r\n\r\nelse{\r\n  setCurrentPage(page) \r\n  setLoading(false)\r\n    }\r\n}\r\n////context function\r\n\r\nconst refreshSearchFilm = (movies:any)=> setMovieList(movies);\r\n\r\nconst refreshTotalPages = (pages:number) =>  setTotalPages(pages);\r\n \r\nconst changeSearchSystem = (search:string) => setSearchFilm(search);\r\n\r\n\r\n\r\n\r\n/// create Pagination link\r\nconst CreatorPagination = (countPage:number) : void =>{\r\n  for(let i = 1 ; i <= countPage;i++){\r\n     Pagination.push(i);\r\n  }\r\n\r\n  console.log(\"pagination changed\");\r\n}\r\n\r\n\r\n\r\n/////get request TopMovie\r\n\r\nuseEffect(()=>getTopMovieList(),[search])\r\n\r\n\r\nuseEffect(()=>getTopMovieList(),[currentPage])\r\n\r\nif(Pagination.length === 0)\r\n{\r\nCreatorPagination(totalPages)\r\n\r\n}\r\n    return(\r\n      <Context.Provider value = {{refreshSearchFilm,refreshTotalPages,changeSearchSystem}}>\r\n\r\n{viewFilm === \"\" ?\r\n        <section >\r\n          <Redirect to=\"/TopMovies\"/>\r\n            <div className={s.toolbar + ' ' + s.wrapperMovie}>top m{<img src = {logo}></img>}vie</div>      \r\n                  <SliderMovie/>\r\n                 <div className = {s.wrapperMovie}>\r\n\r\n                    <div className=\"search___field_movie\"><SearchMovie/></div>\r\n\r\n                    <div className = {loading === true ?  s.listMovie : s.loading }>\r\n                   { loading === true ? \r\n                        movieList.map((item:IMovies,index:number) =>(\r\n                         \r\n                          <div key ={item.id} className = {item.backdrop_path !== null ? `items item__${index}_` : \"logo_not_found\"} >      \r\n                          {item.backdrop_path !==null   ?                                        \r\n                                <>\r\n                                  <img  className = \"image_film_list\" src = {\"https://image.tmdb.org/t/p/w780\" + item.backdrop_path}></img> \r\n                                      <div className=\"data_film_list\">\r\n                                        <div>{item.title}</div>\r\n                                            <div>{item.release_date === undefined ? item.release_date :  item.release_date.replace(/-/g,\" \").split(\" \").reverse().join(\" / \")}</div>\r\n                                              <div style = {{display:\"flex\",alignItems:\"center\",justifyContent:\"center\"}}><FavoriteBorderIcon color = \"secondary\" style = {{paddingRight:\"5px\"}}/>{item.vote_average}</div>\r\n                                             <div> <Link  style = {{textDecoration :\"none\"}} to ={ `/TopMovies/film/${item.id}`} ><Button onClick = {()=>setViewFilm(item.id.toString())} variant=\"contained\" color=\"secondary\">Подробнее</Button> </Link> </div>\r\n                                              \r\n                                      </div>\r\n                                      <div className = \"background_hover\"></div>\r\n                                </>\r\n                                  :\r\n                                  <img  src = {logo}></img>\r\n                          }\r\n                          </div>      \r\n                             \r\n                         \r\n                              )): <CircularProgress key = {Math.random()}color=\"secondary\" />\r\n                    \r\n                    }\r\n                    </div>\r\n                          <div className=\"pagination\">\r\n                            {console.log(Pagination)}\r\n                                {\r\n                                  \r\n                                  Pagination.map((page:number)=>(\r\n                                        <span key= {page} >\r\n                                          <Button onClick = {()=>{changePageHandler(page)}} variant={page === currentPage ? \"contained\" : \"outlined\"} color=\"secondary\" style ={{padding : \"0px\",margin:\"0 10px 10px 0\"}}>{page}</Button>\r\n\r\n                                          </span>\r\n                                  ))\r\n                                }\r\n                          </div>\r\n                 </div>\r\n\r\n        </section>\r\n\r\n        :\r\n        <main>\r\n         \r\n      {\r\n           movieList.map((item:IMovies,index:number) =>(\r\n                   \r\n            item.id.toString() === viewFilm &&  <section key = {item.id} className = \"section_view__film\">  <Viewfilm {...item}/> </section>\r\n          \r\n         ))\r\n         \r\n                         \r\n      }\r\n        <Prompt message={() =>  {setViewFilm(\"\");getTopMovieList();}}/>\r\n        </main>\r\n                              }\r\n        </Context.Provider>\r\n    );\r\n}\r\n\r\nexport default Movies;\r\n\r\n",["139","140"],"D:\\react-project\\04-exclusive-platform\\src\\index.tsx",[],["141","142"],"D:\\react-project\\04-exclusive-platform\\src\\App.tsx",["143"],"import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nimport { Route } from \"react-router-dom\";\nimport Home from \"./Components/Home\"\nimport ToDoList from \"./Components/ToDoList/ToDoList\";\nimport Weather from \"./Components/weather/Weather\";\nimport Movies from \"./Components/MovieDB/Movies\";\n//import exchangeRates from \"./Components/Exchange_rates/exchangeRates\";\nimport ExchangeRates from \"./Components/Exchange_rates/exchangeRates\"\n// import MovieBuild from \"./Components/MovieDB/MovieBuild\";\n\n\n\n\nconst App: React.FC = () => {\n\n  return (\n    <>\n\n\n\n    \n     <Route path = \"/home\" render = {()=><main className=\"app_wrapper\"> <Home/> </main>}></Route> \n  \n      <Route path = \"/ToDoList\" render = {() => <ToDoList/>}></Route>\n      <Route path = \"/Weather\" render = {() => <Weather/>}></Route>\n      <Route path = \"/TopMovies\" render = {() => <Movies/>}></Route>\n       <Route path = \"/ExchangeRates\" render ={()=> <ExchangeRates/> }></Route>\n      </>\n  );\n};\n\nexport default App;\n",["144","145"],"D:\\react-project\\04-exclusive-platform\\src\\reportWebVitals.ts",[],["146","147"],"D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerMD.ts",["148","149"],"import {Settings} from '@material-ui/icons';\r\nimport { Reducer } from 'react';\r\nimport { WrapperDash } from './interfaces';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet initialState : WrapperDash = {\r\n    mainDash: [\r\n        {id:1 ,name : \"Settings\" , url : \"\" , isMain : true , action : \"\"},\r\n        {id:2 ,name : \"ToDo List\" , url : \"\", isMain : false , action : \"\"},\r\n        {id:3 ,name : \"Exchange Rates\",  url : \"\",  isMain : false , action : \"\"},\r\n        {id:4 ,name : \"Top Movies\" , url : \"\",  isMain : false , action : \"\"},\r\n        {id:5 ,name : \"Weather\" , url : \"\",  isMain : false , action : \"\"},\r\n    ],\r\n}\r\n\r\nconst reducerDashBoard = (state : WrapperDash = initialState , action:string )  =>{\r\n\r\n    \r\n       return state;\r\n    \r\n\r\n}\r\n\r\nexport default reducerDashBoard;","D:\\react-project\\04-exclusive-platform\\src\\Redux\\Change_languages.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\ToDoList\\ToDoList.tsx",["150","151"],"import React, {  useRef, useEffect } from \"react\";\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles, MenuItem, Menu,fade, Checkbox, Avatar, TextField, Button, Icon } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport \"./../../styles/ToDoList/ToDoList.scss\"\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"./../../Redux/store\";\r\nimport { checkedTodo, removeTodoAC, AddTodoAC, RefreshInput, LoadToDOAC } from \"../../Redux/reducerToDoList\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '12ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n\r\n\r\n\r\nconst ToDoList = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n//////get array of todo list     \r\n    const { todo , inputTodo } = useSelector((state: AppState) =>\r\n      state.reducerToDO\r\n    );\r\n\r\n//// get username and image\r\n  const {urlImage,userName} = useSelector ((state:AppState) => state.reducerGoogleLogin.googleLogin);\r\n\r\n\r\n\r\n\r\n///// dispatch action creators\r\n    const dispatch = useDispatch();\r\n  \r\n\r\n\r\n   // not_completed \r\n\r\n    const completedTodo = (id:string) => {\r\n     dispatch(checkedTodo(id));\r\n    }\r\n\r\n\r\n\r\n\r\n    const removeTodo = ( id:string) => {\r\n\r\n      setTimeout(()=>dispatch(removeTodoAC(id)),100);\r\n      \r\n    }\r\n\r\n    let inputTodoREF = useRef<HTMLInputElement>();\r\n\r\n  const RefreshInputTodo = (event:React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n      dispatch(RefreshInput(event.target.value));\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n///////Add todo click button\r\n  const addTodo = () => {\r\n  if(inputTodoREF.current!.value !== \"\"){\r\n    console.log(inputTodoREF.current!.value)\r\n    dispatch(AddTodoAC(inputTodoREF.current!.value));\r\n    inputTodoREF.current!.value = \"\";\r\n  }\r\n  }\r\n\r\n///////Add todo press button \"Enter\"\r\nconst KeyBoardAddTodo = (event:React.KeyboardEvent) => {\r\n  if(event.key === \"Enter\" && inputTodoREF.current!.value !== \"\"){\r\n    dispatch(AddTodoAC(inputTodoREF.current!.value));\r\n    inputTodoREF.current!.value = \"\";\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n  localStorage.getItem(\"TODO\") &&  dispatch(LoadToDOAC(JSON.parse(localStorage.getItem(\"TODO\")!))); \r\n},[])\r\n\r\nuseEffect(()=>{\r\n  localStorage.setItem(\"TODO\",JSON.stringify(todo));\r\n},[todo])\r\n\r\n//localStorage.setItem(\"TODO\",JSON.stringify(todo));\r\n    return(\r\n        <>\r\n        <div className={classes.root}>\r\n\r\n<AppBar position=\"static\"  style = {{display:\"block\"}}>\r\n  <Toolbar className = \"todo_wrapper\">\r\n    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n      <MenuIcon />\r\n    </IconButton>\r\n\r\n    <Typography variant=\"h6\" className={classes.title}>\r\n      To Do List\r\n    </Typography>\r\n    \r\n      <div>\r\n  \r\n        <Menu\r\n          id=\"menu-appbar\"\r\n         // anchorEl={console.log(\"\")}\r\n          anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          }}\r\n          open={false}\r\n          onClose={()=>alert(\"HELLO\")}\r\n        >\r\n          <MenuItem onClick={()=>alert(\"HELLO\")}>Profile</MenuItem>\r\n          <MenuItem onClick={()=>alert(\"HELLO\")}>My account</MenuItem>\r\n        </Menu>\r\n      </div>\r\n\r\n      \r\n      <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n\r\n\r\n          <IconButton\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"menu-appbar\"\r\n          aria-haspopup=\"true\"\r\n         // onClick={console.log(\"\")}\r\n          color=\"inherit\"\r\n        >\r\n          <Avatar alt={userName} src={urlImage} />\r\n        </IconButton>\r\n  </Toolbar>\r\n</AppBar>\r\n</div>\r\n\r\n{/*////////// INPUT SECTION //////////// */}\r\n\r\n<section className=\"form_section\" >\r\n           <TextField\r\n          label=\"Enter new toDo\"\r\n          type=\"text\"\r\n          autoComplete=\"current-text\"\r\n          variant=\"filled\"\r\n          className = \"input_todo\"\r\n          defaultValue = {inputTodo}\r\n          onChange = {RefreshInputTodo}\r\n           inputRef = {inputTodoREF}\r\n           onKeyPress = {KeyBoardAddTodo}\r\n        />\r\n\r\n        <div className=\"btn-add-todo\">\r\n        <Button\r\n        onClick = {addTodo}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\"\"\r\n        endIcon={<AddIcon/> }\r\n      ></Button>\r\n        </div>\r\n</section>\r\n\r\n\r\n\r\n\r\n\r\n{/* ///////TO DO LIST ////////////*/}\r\n            <section className=\"todo_wrapper list_scroll\">\r\n\r\n                {\r\n\r\n                  todo.map((item,index) => (\r\n\r\n                    <div className = {item.completed ? \"todo_item completed\" : \"todo_item not_completed\" } key = {item.id} >\r\n                      \r\n                   <Checkbox style ={{marginLeft:20,marginRight:10,zIndex:3}} checked={item.completed} onChange={()=>completedTodo(item.id)} inputProps={{ 'aria-label': 'primary checkbox' }}/>\r\n                  <div className=\"item_content\">{index+1}. {item.contentToDo}</div>\r\n                  <div className=\"time_added_todo\">{item.dateAdded}</div>\r\n                  <div className=\"btn_delete_todo\" onClick = {()=>removeTodo(item.id)}><DeleteIcon color = \"secondary\" /></div>\r\n                      </div>\r\n\r\n                  ))\r\n\r\n                }\r\n                    \r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ToDoList;",["152","153"],"D:\\react-project\\04-exclusive-platform\\src\\Redux\\Global_functions.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\MovieItem.tsx",["154"],"import React from 'react';\r\n\r\nimport s from './../../styles/Movies/movies-styles.module.scss'\r\n// import { useSelector } from 'react-redux';\r\n// import { AppState } from '../../Redux/store';\r\nimport {  en_US, IMovies } from './../../Redux/interfaces';\r\n\r\ntype Props = IMovies & en_US;\r\n\r\nconst MovieItemSlider:React.FC<Props> = (props) => {\r\n\r\nconst {MoviePage} = props;\r\n\r\n\r\n  // const {en} = useSelector((state:AppState)=>state.ChangeLanguageReducer);\r\n  // console.log(en);\r\n\r\n    return(\r\n    <>\r\n        <img  src = {\"https://image.tmdb.org/t/p/w1280\" + props.backdrop_path}></img> \r\n        <div className={s.name_film}>{props.title}</div>\r\n        <div className={s.about_film_slider}>\r\n       <div className=\"published\">{MoviePage.published} <span style = {{color:\"#ff0000\"}}>{props.release_date.replace(/-/g,\" \").split(\" \").reverse().join(\" / \")}</span> </div>\r\n         <div className=\"update\">{MoviePage.update} <span style = {{color:\"#ff0000\"}}>{props.release_date.replace(/-/g,\" \").split(\" \").reverse().join(\" / \")}</span></div>\r\n       <div className=\"rating\">{MoviePage.rating} <span style = {{color:\"#ff0000\"}}>{props.vote_average}</span></div>\r\n       <div className=\"popularity\">{MoviePage.popularity} <span style = {{color:\"#ff0000\"}}>{props.popularity}</span></div>\r\n       <div className=\"sexual_content\">{MoviePage.sexual_content} <span style = {{color:\"#ff0000\"}}>{props.adult ? \"Yes\" : \"No\"}</span></div>\r\n        </div>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default MovieItemSlider;",["155","156"],"D:\\react-project\\04-exclusive-platform\\src\\api\\api.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\SearchMovie.tsx",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\context.js",[],["157","158"],"D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerGoogleLogin.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Redux\\reducerToDoList.ts",["159","160"],"\r\nimport { StateToDo, ActionCompletedTodo, Actions, IToDo } from './interfaces';\r\nimport { COMPLETE_TODO_ITEM, REMOVE_TODO_ITEM, ADD_NEW_TODO_ITEM, REFRESH_INPUT_TODO, LOAD_TODO_ITEM } from './types';\r\nimport { getDate } from './Global_functions';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst initialState:StateToDo = {\r\n\r\n    todo: [],\r\n\r\n    inputTodo : \"\"\r\n}\r\n\r\nconst reducerToDO = (state:StateToDo = initialState , action :Actions) => {\r\n\r\n    switch(action.type){\r\n        case COMPLETE_TODO_ITEM: {\r\n\r\n            return {\r\n                ...state,\r\n         \r\n                 todo:state.todo.map(item  => {\r\n\r\n                    if(item.id == action.id ){\r\n                        console.log(\"equal\");\r\n                        return {...item,completed:!item.completed}\r\n\r\n                    }\r\n            \r\n                    return item;\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n\r\n        case REMOVE_TODO_ITEM : {\r\n            \r\n            return{\r\n                ...state,\r\n\r\n                todo: state.todo.filter(item => item.id !== action.id)\r\n       \r\n\r\n            }\r\n        \r\n        }\r\n\r\n        case REFRESH_INPUT_TODO: {\r\n\r\n            return {\r\n                ...state,\r\n                inputTodo : action.inputTodo\r\n            }\r\n        }\r\n\r\n        \r\n        case ADD_NEW_TODO_ITEM:{\r\n\r\n            let tempObject:IToDo = {\r\n                id:Date.now().toString(),\r\n                contentToDo : action.inputTodo,\r\n                completed : false,\r\n                dateAdded : `Added : ${getDate()}`\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                todo :  [...state.todo,tempObject],\r\n                \r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        case LOAD_TODO_ITEM : {\r\n\r\n            return{\r\n                ...state,\r\n                todo : action.local\r\n            }\r\n        }\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\n\r\nexport const checkedTodo = (id:string):Object  =>({\r\ntype : COMPLETE_TODO_ITEM,\r\nid\r\n})\r\n\r\nexport const removeTodoAC = (id:string) :Object =>({\r\ntype : REMOVE_TODO_ITEM,\r\nid\r\n})\r\n\r\nexport const AddTodoAC = (inputTodo:string) :Object =>({\r\ntype : ADD_NEW_TODO_ITEM,\r\ninputTodo\r\n})\r\n\r\n\r\nexport const RefreshInput = (inputTodo:string) :Object => ({\r\n    type : REFRESH_INPUT_TODO,\r\n    inputTodo\r\n    })\r\n\r\nexport const LoadToDOAC = (local : Array<IToDo>) =>({\r\n    type : LOAD_TODO_ITEM,\r\n    local\r\n})\r\nexport default reducerToDO;","D:\\react-project\\04-exclusive-platform\\src\\Components\\Home.tsx",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\weather\\Weather.tsx",["161","162"],"import React, { ChangeEvent } from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport s from './../../styles/Weather/weather.module.scss'\r\nimport CloudIcon from '@material-ui/icons/Cloud';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\n// import ResponseImg from './../../images/weather_pesponse_.jpg';\r\n\r\n\r\n\r\n\r\ninterface ITemperature{\r\n    temperature : string,\r\n    temp_max :  string,\r\n    temp_min : string,\r\n    feels_like : string,\r\n    humidity : string\r\n}\r\ninterface IWeather{\r\n    main : string,\r\n    description :  string,\r\n    icon : string,\r\n    visibility : string,\r\n    windSpeed : string\r\n}\r\n\r\ninterface ILocation {\r\n    city : string\r\n    country :string\r\n}\r\ninterface IInput {\r\n    helperText : string,\r\n    error : boolean\r\n}\r\n\r\nconst Weather:React.FC = () =>{\r\n\r\n    const APIkey = '39f0a57b825915c88c4e6fd88440ea37';\r\n    const lang = 'en'\r\n    const version = '2.5';\r\n\r\n\r\n    const [city , setCity] = useState<string>(\"\");\r\n    const [parallax , setParallax] = useState<string>(`translate(0px)`);\r\n    const [input , setInput] = useState<IInput>({helperText:\"\",error : false});\r\n //// data GET-request  \r\n    const [dataLocation,setLocation] = useState<ILocation>({city:\"\",country:\"\"});\r\n    const [temparature , setTemparature] = useState<ITemperature>({temperature:\"0\",temp_max:\"0\",temp_min:\"0\",feels_like:\"0\",humidity : \"0%\"});\r\n    const [dataWeather , setWeather] = useState<IWeather>({main:\"\",description:\"\",icon:\"0\",visibility:\"0\",windSpeed:\"0\"});\r\n    const [isActiveBtn, setBtn] = useState<boolean>(false);\r\n    const [responseIsOk , setResponseStatus] = useState<boolean>(false);\r\n\r\n\r\n\r\nconst convertToCelsius = (celsius:string) : string => (parseInt(celsius) - 273).toString();\r\nconst convertMeterToKm = (meter:string) : string => (parseInt(meter) * Math.pow(10,-3)).toString();\r\n\r\n\r\nconst getWeather = (location:string) =>{\r\n    axios.get(`https://api.openweathermap.org/data/${version}/weather?q=${location}&appid=${APIkey}&lang=${lang}`).\r\nthen((response:any)=>{\r\n\r\n    const {data} = response;\r\n    const {main,weather} = data;\r\n\r\nconsole.log(data);\r\n\r\nsetResponseStatus(true) \r\n\r\n\r\n    let temp:ITemperature = {\r\n        temperature : convertToCelsius(main.temp),\r\n        temp_max :   convertToCelsius(main.temp_max),\r\n        temp_min : convertToCelsius(main.temp_min),\r\n        feels_like:convertToCelsius(main.feels_like),\r\n        humidity : main.humidity\r\n    }\r\n\r\n    let tempDataWeather:IWeather= {\r\n        main : weather[0].main,\r\n        description:weather[0].description,\r\n        icon : weather[0].icon,\r\n        visibility : `${convertMeterToKm(data.visibility)}  km`,\r\n        windSpeed : `${data.wind.speed} km/h`\r\n    }\r\n\r\n    let tempDataLocation : ILocation = {\r\n        city : data.name,\r\n        country : data.sys.country,\r\n    }\r\n\r\n    setWeather(tempDataWeather);\r\n\r\n    setTemparature(temp);\r\n\r\n    setLocation(tempDataLocation); \r\n\r\n    setCity(data.name); \r\n\r\n    setInput({helperText:\"\",error:false})\r\n\r\n     setBtn(true);\r\n    console.log(data.name+city);\r\n    return response;\r\n  \r\n})\r\n.catch((error:Error)=>{\r\n    setCity(\"\");\r\n    setResponseStatus(false);\r\n    ref.current!.value ?  setBtn(false) : setBtn(true)\r\n    setInput({helperText:\"City not found\",error:true})\r\n})\r\n}\r\n\r\n\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n\r\naxios.get('http://ip-api.com/json').\r\nthen((response:any)=>{\r\n   // console.log(response);\r\n    setCity(response.data.city);\r\n    setBtn(false);\r\n})\r\n.catch((error:Error)=>{\r\n    console.log(`Response (get city name): ${error.message}`);\r\n    \r\n})\r\n\r\n},[])\r\n\r\n\r\nlet ref = React.useRef<HTMLInputElement>();\r\n  \r\n\r\n\r\nconst inputChanged = (event:ChangeEvent<HTMLInputElement>) =>{\r\n\r\n    setCity(event.target.value);\r\n\r\n    event.target.value ? setBtn(false) : setBtn(true);\r\n}\r\n\r\n\r\n\r\nconst parallaxEffect = (event:React.MouseEvent)=> setParallax(`translateX(${event.clientX*5 / 3000}px)`);\r\n\r\n\r\n    return(\r\n    <section onMouseMove = {parallaxEffect} >\r\n        <section className={s.wrapper_weather} >\r\n\r\n\r\n\r\n    <div className={s.wrapper_name_app}>  \r\n       <CloudIcon  style={{ fontSize: 40 ,color:\"blue\"}}/> \r\n        <h2>Weather</h2>\r\n        <WbSunnyIcon  style={{ fontSize: 40 , color : \"red\" }}/>\r\n        </div>   \r\n\r\n        {/* , {dataLocation.country} */}\r\n        {responseIsOk ?\r\n        <div className={responseIsOk ? s.block_response + ' ' + s.success : s.block_response} style = {{transform : parallax}}>\r\n        \r\n        <div className={s.city_data}>\r\n          <div className={s.city_name}>{dataLocation.city},{dataLocation.country}</div>\r\n\r\n          <div className={s.icon}><img  src={`http://openweathermap.org/img/wn/${dataWeather.icon}@2x.png`} alt={dataWeather.main} className={s.icon_main}/></div>\r\n        \r\n         </div>\r\n        <div className={s.data_temperature}> {temparature.temperature === undefined ? \"\" : temparature!.temperature} &deg; C</div>\r\n\r\n\r\n\r\n                     <div className=\"more_temp\">\r\n                         <div className=\"high_low_temp_data\">{temparature.temp_min}&deg; / {temparature.temp_max}&deg;</div>\r\n                            <div className={s.title}>low / high</div>                   \r\n                    </div>\r\n                    {/* {s.feels_like} */}\r\n                <div className=\"feels_like\">\r\n                     <div className =\"feels_like_data\">{temparature.temperature} &deg;</div>\r\n                        <div className={s.title}>feels like</div>\r\n                </div>\r\n                {/* {s.visibility} */}\r\n                <div className = {s.visibility}>\r\n                    <div className=\"visibility_data\">{dataWeather.visibility}</div>\r\n                    <div className={s.title}>visibility</div>\r\n                </div>\r\n           <div className={s.wrapperData}>    </div>    \r\n\r\n\r\n\r\n\r\n\r\n                            {/* {s.description} */}\r\n                <div className ={s.description}>\r\n                        <div className=\"description_data\">{dataWeather.description}</div>\r\n                        <div className={s.title}>description</div>\r\n                </div>\r\n                {/* {s.humidity} */}\r\n                <div className = {s.humidity}>\r\n                    <div className=\"humidity_data\">{temparature.humidity}%</div>\r\n                    <div className={s.title}>humidity</div>\r\n                </div>\r\n                \r\n                {/* {s.windSpeed} */}\r\n                <div className={s.windSpeed}>\r\n                    <div className=\"wind_data\">{dataWeather.windSpeed}</div>\r\n                    <div className={s.title}>wind</div>\r\n                </div>   \r\n        </div>\r\n        \r\n        : \"\"\r\n        }\r\n   \r\n\r\n        <div className={responseIsOk ? s.input_section +' '+ s.success_response : s.input_section } >\r\n        <TextField inputRef ={ref} className = {s.inputWeather} error ={input.error} id=\"outlined-basic\" label=\"Your city\" onChange ={inputChanged}  variant=\"filled\" helperText ={input.helperText} value = {city}/>\r\n        <Button onClick ={ ()=> getWeather(ref.current!.value)} variant=\"contained\" color=\"secondary\" className = {s.btnWeather} disabled = {isActiveBtn}>Get weather</Button>\r\n        </div>\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        </section>\r\n\r\n        <section className={s.background_section} style = {{overflow:\"hidden\"}} ></section>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Weather;","D:\\react-project\\04-exclusive-platform\\src\\Redux\\types.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\header\\headerC.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\MainDashboard\\Dashboard_con.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\header\\header.tsx",["163"],"import React, { useState, useEffect } from 'react';\r\nimport  './../../styles/main_header.scss';\r\nimport {Person , Mic} from '@material-ui/icons';\r\nimport {GoogleLogin, GoogleLoginResponse} from 'react-google-login';\r\nimport { ClientID } from './../../api/api';\r\nimport { PropsHeader } from './headerC';\r\nimport { IGoogleLoginData } from '../../Redux/interfaces';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { getDate } from '../../Redux/Global_functions';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Header:React.FC<PropsHeader> = ({googleLogin,GoogleAC}) =>{\r\n    //hook get date //DATE\r\n    const [date , setDate] = useState<string>(\"00:00\");\r\n\r\n\r\n      useEffect(()=>{\r\n        const interval =  setInterval(()=>{\r\n             setDate(getDate);\r\n         },1000);\r\n         return () => clearInterval(interval);\r\n     },[]);\r\n\r\n\r\n////End Date ------------------------------------\r\n\r\n\r\n///Google Login\r\n\r\nconst responseGoogle =(response : GoogleLoginResponse) : void  =>{\r\n\r\n    console.log(response.getBasicProfile().getEmail());\r\n    const {name , imageUrl} = response.profileObj;\r\n\r\n/////  dispatch data Google Login ///\r\n\r\n    GoogleAC({\r\n       userName: name,urlImage : imageUrl,SignedTime : Date.now().toString(),isLocalStorage : true\r\n    });\r\n\r\n    console.log(response);\r\n    console.log(`Sign in account : ${getDate()}`);\r\n}\r\n\r\n\r\n\r\n/// Load Google Account from LocalStorage\r\nuseEffect(()=>{\r\n         \r\n    if(localStorage.getItem(\"SESSION_DATA\")){\r\n    \r\n        let data:IGoogleLoginData = JSON.parse(localStorage.getItem(\"SESSION_DATA\")!);\r\n        \r\n        GoogleAC(data);\r\n        \r\n        }   \r\n         },[])\r\n    \r\n\r\n    return(\r\n        <header className = \"main__screen_header\">\r\n\r\n        <div className=\"left_block\">\r\n       \r\n        <GoogleLogin clientId = {ClientID} onSuccess= {responseGoogle} onFailure = {responseGoogle} />\r\n        \r\n        <div className=\"data-user\">\r\n        <div className=\"nickname_user\">{googleLogin.userName}</div>\r\n        <div >{googleLogin.urlImage ? <Avatar alt={googleLogin.userName} src= {googleLogin.urlImage} style ={{marginRight:10 , width:80,height:80}} /> : <Person style = {{fontSize : 40,color:\"primary\"}}/> }</div>\r\n        </div>\r\n\r\n\r\n     </div>  \r\n            \r\n\r\n        <div className=\"right_block\">\r\n        <div className=\"date_now_user\">{date}</div>\r\n        <div className=\"microphone_search\"><Mic style = {{fontSize : 30,color:\"primary\"}} /></div>\r\n        </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","D:\\react-project\\04-exclusive-platform\\src\\Components\\MainDashboard.tsx",["164"],"import React from 'react';\r\nimport s from \"./../styles/main_dashborad.module.css\";\r\nimport { WrapperDash } from './../Redux/interfaces';\r\nimport { Route , Link} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst MainDashBoard:React.FC<WrapperDash> = ({mainDash}) =>{\r\ndebugger\r\n\r\n\r\n\r\n    return(\r\n        <section className = {s.section_dashboard}>\r\n            <div className={s.grid}>\r\n                \r\n                   {\r\n                    mainDash.map(dash => (\r\n                        dash.isMain === true ? \r\n                       <Link to = {`/${dash.name.split(' ').join('')}`} className={s.main_section} key = {dash.id}> \r\n                              <div className={s.main_name_section}>{dash.name}</div>\r\n                              </Link>  \r\n                         : \r\n                         <Link to = {`/${dash.name.split(' ').join('')}`} className={s.section} key = {dash.id}>\r\n                              <div className={s.name_section}>{dash.name}</div>\r\n                          </Link>  \r\n                        \r\n                    ))\r\n                \r\n                }\r\n                   \r\n            \r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nexport default MainDashBoard;","D:\\react-project\\04-exclusive-platform\\src\\Redux\\store.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\SliderMovie.tsx",["165"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../Redux/store';\r\nimport { IMovies } from '../../Redux/interfaces';\r\nimport MovieItemSlider from './MovieItem';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport s from './../../styles/Movies/movies-styles.module.scss';\r\nimport axios from 'axios';\r\nimport { API_MOVIES } from '../../api/api';\r\n\r\n\r\n\r\nconst SliderMovie:React.FC = ()=>{\r\n\r\n\r\n    const {en} = useSelector((state:AppState)=>state.ChangeLanguageReducer);\r\n    const {ru} = useSelector((state:AppState)=>state.ChangeLanguageReducer);\r\n\r\nconst [language,setLanguage ]  = useState<string>(\"ru\");\r\nconst [moviesTop,setMoviesTop] = useState<IMovies[]>([]);\r\nconst[sliderPosition,setsliderPosition] = useState<number>(0);\r\n\r\n\r\n\r\nconst getTopMovieSlider = ()=>{\r\n    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${API_MOVIES}&language=ru-RU&page=1`)\r\n    .then((response:any)=>{\r\n        console.log(response);\r\n        const {data} = response;\r\n        setMoviesTop(data.results);\r\n    })\r\n    .catch((error:Error)=> console.log(error.message));\r\n}\r\n\r\n\r\nuseEffect(()=>getTopMovieSlider(),[])\r\n\r\n\r\n//////Start contollers slider \r\nconst moveSliderNext = ()=>{\r\n    if(sliderPosition > -1900) setsliderPosition(sliderPosition - 100);\r\n    else  setsliderPosition(0);\r\n   \r\n  }\r\n  \r\n  const moveSliderPrev = ()=>{\r\n    if (sliderPosition >= 0) setsliderPosition(-1900); \r\n    else setsliderPosition(sliderPosition + 100);\r\n  }\r\n  ///////End controllers slider\r\n  \r\n  useEffect(() => {\r\n    const interval : NodeJS.Timeout   = setInterval(() => {\r\n  \r\n  \r\n      if(sliderPosition > -1900) setsliderPosition(sliderPosition - 100);\r\n  \r\n       else  setsliderPosition(0);\r\n    }, 5000);\r\n  \r\n    return () => clearInterval(interval);\r\n  },[sliderPosition]);\r\n  \r\n  \r\n\r\n\r\n\r\n    return(\r\n      \r\n <div className={s.wrapper_slider}>\r\n        <div className={s.slider__line} style = {{left:sliderPosition + '%'}}>\r\n\r\n                {\r\n                moviesTop.map((movie:IMovies,index:number)=>(\r\n                    <div key = {movie.id}  className = {s.imageTopSlider}>\r\n                    {language === \"en\" ?  <MovieItemSlider {...movie}  {...en}/>  : <MovieItemSlider {...movie}  {...ru}/>             \r\n                    }\r\n                    </div>\r\n                ))} \r\n\r\n        </div>\r\n<div className = {s.controllersSlider}>\r\n\r\n        <ArrowBackIosIcon color=\"secondary\" style={{ fontSize: 40 }} className = {s.leftArrow} onClick = {()=> moveSliderPrev()}/>\r\n        <ArrowForwardIosIcon color=\"secondary\" style={{ fontSize: 40 }} className = {s.rightArrow} onClick = {() =>moveSliderNext()}/>\r\n          \r\n         </div>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default SliderMovie;",["166","167"],"D:\\react-project\\04-exclusive-platform\\src\\Components\\MovieDB\\ViewFilm.tsx",["168","169","170","171"],"import React from \"react\";\r\nimport { IMovies, en_US } from \"../../Redux/interfaces\";\r\nimport \"./../../styles/Movies/view_item_movie.scss\";\r\nimport {\r\n  CircularProgressProps,\r\n  Box,\r\n  CircularProgress,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Redirect, Prompt } from \"react-router-dom\";\r\n\r\nconst CircularProgressWithLabel = (\r\n  props: CircularProgressProps & { value: number }\r\n) => {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        bottom={0}\r\n        right={0}\r\n        left={0}\r\n        top={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Typography\r\n          variant=\"caption\"\r\n          component=\"div\"\r\n          color=\"secondary\"\r\n          style={{\r\n            fontSize: \"22px\",\r\n            position: \"absolute\",\r\n            left: \"-37px\",\r\n            top: \"-17px\",\r\n          }}\r\n        >{`${(props.value / 10).toFixed(1)}`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\ntype Props = IMovies;\r\n\r\nconst Viewfilm: React.FC<Props> = (props) => {\r\n  return (\r\n    <>\r\n{/* {props.id === undefined && <Redirect to = \"TopMovies\"/>} */}\r\n    <div className=\"wrapper_view_film\">\r\n      <div className=\"name_view_film\">{props.title}</div>\r\n      <div className=\"wrapper_img_circularProgress_view_film\">\r\n\r\n        <div>\r\n          <img\r\n            className=\"img_view_film\"\r\n            src={\r\n              \"https://image.tmdb.org/t/p/w300_and_h450_bestv2\" +\r\n              props.backdrop_path\r\n            }\r\n          ></img>\r\n        \r\n          <CircularProgressWithLabel\r\n            color=\"secondary\"\r\n            className=\"circular_progress\"\r\n            value={props.vote_average * 10}\r\n            size={60}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"description_view_film\">\r\n          <div className=\"description__\">Описание</div>\r\n          <span>{props.overview !== \"\" ?  props.overview : \"Описания отсутствует\"}</span>\r\n          </div>\r\n      </div>\r\n\r\n      {/* <div>{props.vote_average}</div> */}\r\n\r\n    </div>\r\n    </>\r\n  );\r\n\r\n          }\r\nexport default Viewfilm;\r\n","D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\exchangeRates.tsx",["172","173","174"],"D:\\react-project\\04-exclusive-platform\\src\\Redux\\interfaces.ts",[],"D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\TransferTo.tsx",["175"],"import React, { useContext } from 'react';\r\nimport { createStyles, makeStyles, withStyles, Theme } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { IExchangeRates } from '../../Redux/interfaces';\r\nimport { Context } from '../context';\r\n\r\nconst BootstrapInput = withStyles((theme: Theme) =>\r\n  createStyles({\r\n\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      width:'40px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      // Use the system font instead of the default Roboto font.\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(','),\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#80bdff',\r\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n      },\r\n    },\r\n  }),\r\n)(InputBase);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }),\r\n);\r\n\r\ntype props ={\r\n  fieldToTransfer:string\r\n}\r\n\r\ntype allProps = props & IExchangeRates;\r\n\r\nconst TransferTo:React.FC<allProps> = (props) => {\r\n  const classes = useStyles();\r\n  const [age, setAge] = React.useState('');\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setAge(event.target.value as string);\r\n  };\r\n\r\n\r\n    \r\n let filterItems =  Object.entries(props.conversion_rates).filter(([key,value]) =>\r\n     key.toLocaleLowerCase().\r\n    indexOf(props.fieldToTransfer.toLowerCase()) !== -1);\r\n\r\nconsole.log(filterItems)\r\n\r\nconst {getCurrentValueTo} = useContext(Context);\r\n  return (\r\n    <div>\r\n      \r\n      <FormControl className={classes.margin}>\r\n        <NativeSelect\r\n          id=\"demo-customized-select-native\"\r\n          value={age}\r\n          onClick = {getCurrentValueTo}\r\n          onChange={handleChange}\r\n          input={<BootstrapInput />}\r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n\r\n               { Object.entries(filterItems).map(([key,value]) =>  <option key = {`${value}`+Math.floor(Math.random()*1000)} value ={`${value[1]} ${value[0]}`}>{value[0] }</option> )}\r\n                  \r\n            \r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransferTo;","D:\\react-project\\04-exclusive-platform\\src\\Components\\Exchange_rates\\TranserFrom.tsx",["176","177","178"],{"ruleId":"179","severity":1,"message":"180","line":92,"column":33,"nodeType":"181","endLine":92,"endColumn":41,"suggestions":"182"},{"ruleId":"179","severity":1,"message":"180","line":95,"column":33,"nodeType":"181","endLine":95,"endColumn":46,"suggestions":"183"},{"ruleId":"184","severity":1,"message":"185","line":108,"column":69,"nodeType":"186","endLine":108,"endColumn":87},{"ruleId":"184","severity":1,"message":"185","line":121,"column":35,"nodeType":"186","endLine":121,"endColumn":134},{"ruleId":"184","severity":1,"message":"185","line":132,"column":35,"nodeType":"186","endLine":132,"endColumn":54},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"187","replacedBy":"191"},{"ruleId":"189","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":1,"column":17,"nodeType":"195","messageId":"196","endLine":1,"endColumn":25},{"ruleId":"187","replacedBy":"197"},{"ruleId":"189","replacedBy":"198"},{"ruleId":"187","replacedBy":"199"},{"ruleId":"189","replacedBy":"200"},{"ruleId":"193","severity":1,"message":"201","line":1,"column":9,"nodeType":"195","messageId":"196","endLine":1,"endColumn":17},{"ruleId":"193","severity":1,"message":"202","line":2,"column":10,"nodeType":"195","messageId":"196","endLine":2,"endColumn":17},{"ruleId":"193","severity":1,"message":"203","line":2,"column":121,"nodeType":"195","messageId":"196","endLine":2,"endColumn":125},{"ruleId":"179","severity":1,"message":"204","line":137,"column":3,"nodeType":"181","endLine":137,"endColumn":5,"suggestions":"205"},{"ruleId":"187","replacedBy":"206"},{"ruleId":"189","replacedBy":"207"},{"ruleId":"184","severity":1,"message":"185","line":20,"column":9,"nodeType":"186","endLine":20,"endColumn":80},{"ruleId":"187","replacedBy":"208"},{"ruleId":"189","replacedBy":"209"},{"ruleId":"187","replacedBy":"191"},{"ruleId":"189","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"210","line":2,"column":21,"nodeType":"195","messageId":"196","endLine":2,"endColumn":40},{"ruleId":"211","severity":1,"message":"212","line":28,"column":32,"nodeType":"213","messageId":"214","endLine":28,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":61,"column":115,"nodeType":"217","messageId":"218","endLine":61,"endColumn":116,"fix":"219"},{"ruleId":"215","severity":1,"message":"216","line":122,"column":36,"nodeType":"217","messageId":"218","endLine":122,"endColumn":37,"fix":"220"},{"ruleId":"179","severity":1,"message":"221","line":62,"column":12,"nodeType":"181","endLine":62,"endColumn":14,"suggestions":"222"},{"ruleId":"193","severity":1,"message":"223","line":4,"column":10,"nodeType":"195","messageId":"196","endLine":4,"endColumn":15},{"ruleId":"193","severity":1,"message":"224","line":20,"column":17,"nodeType":"195","messageId":"196","endLine":20,"endColumn":28},{"ruleId":"187","replacedBy":"225"},{"ruleId":"189","replacedBy":"226"},{"ruleId":"193","severity":1,"message":"227","line":2,"column":19,"nodeType":"195","messageId":"196","endLine":2,"endColumn":24},{"ruleId":"193","severity":1,"message":"228","line":10,"column":10,"nodeType":"195","messageId":"196","endLine":10,"endColumn":18},{"ruleId":"193","severity":1,"message":"229","line":10,"column":20,"nodeType":"195","messageId":"196","endLine":10,"endColumn":26},{"ruleId":"184","severity":1,"message":"185","line":55,"column":11,"nodeType":"186","endLine":61,"endColumn":12},{"ruleId":"193","severity":1,"message":"230","line":10,"column":10,"nodeType":"195","messageId":"196","endLine":10,"endColumn":15},{"ruleId":"179","severity":1,"message":"231","line":13,"column":35,"nodeType":"181","endLine":13,"endColumn":37,"suggestions":"232"},{"ruleId":"193","severity":1,"message":"233","line":22,"column":10,"nodeType":"195","messageId":"196","endLine":22,"endColumn":19},{"ruleId":"215","severity":1,"message":"216","line":67,"column":29,"nodeType":"217","messageId":"218","endLine":67,"endColumn":30,"fix":"234"},{"ruleId":"193","severity":1,"message":"235","line":2,"column":17,"nodeType":"195","messageId":"196","endLine":2,"endColumn":27},{"ruleId":"193","severity":1,"message":"236","line":76,"column":40,"nodeType":"195","messageId":"196","endLine":76,"endColumn":55},{"ruleId":"179","severity":1,"message":"237","line":82,"column":3,"nodeType":"181","endLine":82,"endColumn":10,"suggestions":"238"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTopMovieList'. Either include it or remove the dependency array.","ArrayExpression",["239"],["240"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["241"],"no-negated-in-lhs",["242"],["241"],["242"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["241"],["242"],["241"],["242"],"'Settings' is defined but never used.","'Reducer' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["243"],["241"],["242"],["241"],["242"],"'ActionCompletedTodo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"244","text":"245"},{"range":"246","text":"245"},"React Hook useEffect has a missing dependency: 'GoogleAC'. Either include it or remove the dependency array. If 'GoogleAC' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["247"],"'Route' is defined but never used.","'setLanguage' is assigned a value but never used.",["241"],["242"],"'en_US' is defined but never used.","'Redirect' is defined but never used.","'Prompt' is defined but never used.","'parse' is defined but never used.","React Hook useEffect has a missing dependency: 'base'. Either include it or remove the dependency array.",["248"],"'valueFrom' is assigned a value but never used.",{"range":"249","text":"250"},"'MouseEvent' is defined but never used.","'changeBaseValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRates'. Either include it or remove the dependency array.",["251"],{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},[2077,2080],"\r\n.",[3416,3419],{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},[1938,1945],"\r\n    .",{"desc":"262","fix":"263"},"Update the dependencies array to be: [getTopMovieList, search]",{"range":"264","text":"265"},"Update the dependencies array to be: [currentPage, getTopMovieList]",{"range":"266","text":"267"},"Update the dependencies array to be: [dispatch]",{"range":"268","text":"269"},"Update the dependencies array to be: [GoogleAC]",{"range":"270","text":"271"},"Update the dependencies array to be: [base]",{"range":"272","text":"273"},"Update the dependencies array to be: [getRates, rates]",{"range":"274","text":"275"},[2490,2498],"[getTopMovieList, search]",[2537,2550],"[currentPage, getTopMovieList]",[3526,3528],"[dispatch]",[1614,1616],"[GoogleAC]",[566,568],"[base]",[2222,2229],"[getRates, rates]"]